---
- name: Teleport version
  command: teleport version
  register: teleport_version_c

- name: Teleport version | Debug
  debug:
    var: teleport_version_c.stdout

- name: Preserve the old binary, just in case the upgrade goes wrong.
  shell: which teleport | xargs dirname
  register: teleport_dir

- name: Store the stats of teleport in the 'teleport_file' variable
  become: true
  stat:
    path: "{{ teleport_dir.stdout | trim }}/teleport"
  register: teleport_file

- name: "Move {{ teleport_file.stat.path }} to the {{ teleport_file.stat.path }}.bak"
  become: true
  shell: "mv {{ teleport_file.stat.path }} {{ teleport_file.stat.path }}.bak"
  when: teleport_file.stat.exists == true

- name: Download Teleport's PGP public key
  become: true
  ansible.builtin.get_url:
    url: "{{ pgp_public_key }}"
    dest: /usr/share/keyrings/teleport-archive-keyring.asc

- name: Source variables about OS version
  shell: |
    source /etc/os-release &&
    echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] https://apt.releases.teleport.dev/${ID?} ${VERSION_CODENAME?} {{ teleport_version }}"
  args:
    executable: /bin/bash
  register: teleport_repo

- debug:
    var: teleport_repo.stdout

- name: Add the Teleport APT repository
  become: true
  ansible.builtin.apt_repository:
    repo: "{{ teleport_repo.stdout }}"
    filename: teleport.list
    state: present

- name: Get running processes
  shell: pidof teleport | tr ' ' '\n'
  register: old_processes

- name: Update repositories cache and install teleport package
  become: true
  ansible.builtin.apt:
    name: teleport
    state: latest
    update_cache: yes
  register: teleport_install

- name: Teleport installtion states
  debug:
    var: teleport_install

- name: Restore the stats of teleport in the 'teleport_file' variable
  become: true
  stat:
    path: "{{ teleport_dir.stdout | trim }}/teleport"
  register: teleport_file

- name: "Copy teleport bak {{ teleport_dir.stdout | trim }}/teleport to teleport if not exist"
  become: true
  ansible.builtin.copy:
    src: "{{ teleport_dir.stdout | trim }}/teleport.bak"
    dest: "{{ teleport_dir.stdout | trim }}/teleport"
    remote_src: yes
  when: teleport_file.stat.exists == false

- name: Teleport running processes
  debug:
    var: old_processes.stdout_lines

- name: Fork the teleport process
  become: true
  shell: "kill -USR2 $(pidof teleport | awk '{print $1}')"

- name: Get Teleport news running processes
  shell: pidof teleport | tr ' ' '\n'
  register: new_processes

- name: Teleport news running processes
  debug:
    var: new_processes.stdout_lines

- name: Kill Old running processes
  become: true
  shell: "kill -QUIT {{ item | trim | int }}"
  with_items: "{{ old_processes.stdout_lines }}"

# Debug
- name: Get Teleport end running processes
  shell: pidof teleport | tr ' ' '\n'
  register: end_processes

- name: Teleport end running processes
  debug:
    var: end_processes.stdout_lines
